@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient Http 
@inject NavigationManager NavigationManager 

    
<div id="parentContainer" Class="d-flex align-center justify-center py-2 px-1" style="height:100%; @($"Background:{Colors.Blue.Darken3};")" >
    <AuthorizeView>
        <Authorized>
            @if (UserDetails.Access_token == true)
            {
                NavigationManager.NavigateTo("/Admin");
            }
            else
            {
                NavigationManager.NavigateTo("/clients");
            }
        </Authorized>
        <NotAuthorized Context="Login">
            <EditForm Model="@model" OnValidSubmit="ValidateUser"  style="width : 450px; ">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Username" HelperText="Max. 25 characters"
                                        @bind-Value="model.Username" For="@(() => model.Username)" />
                        <MudTextField Label="Password" HelperText="Choose a strong password (Min 8 characters)" Class="mt-3"
                                        @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"  Class="ml-auto">Login</MudButton>
                    </MudCardActions>
                    <MudAlert Icon="Alert">
                        <span>@LoginMessage</span>
                    </MudAlert>
                </MudCard>
            </EditForm>
        </NotAuthorized>
    </AuthorizeView>
</div>
   


@code {

    LoginForm model = new();
    public string LoginMessage { get; set; }
    UsersModel UserDetails;



    private async Task<bool> ValidateUser()
    {
        try
        {
            //Http.DefaultRequestHeaders.Authorization = new HttpCredentialsHeaderValue("Bearer", access_token);
            //Http.DefaultRequestHeaders.Accept.Add(new HttpMediaTypeWithQualityHeaderValue("application/json"));

            string json_User = JsonConvert.SerializeObject(model);

            #region "API Request and Response" 
            // Preparing the httpRequestMessage to handle my request
            HttpRequestMessage httpRequestMessage = new();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(@"https://localhost:44315/api/Access/");
            httpRequestMessage.Content = new StringContent(json_User);
            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = await Http.SendAsync(httpRequestMessage);

            var responseStatusCode = response.StatusCode;
            var responseBody = await response.Content.ReadAsStringAsync();

            #endregion


            if (responseStatusCode.ToString() == "OK") // If the user credentials are legit it will be true
            {
                // DeserializeObj that came in response
                UserDetails = JsonConvert.DeserializeObject<UsersModel>(responseBody);

                await sessionStorage.SetItemAsStringAsync("Username", model.Username);
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetUserAdAuthenticated(UserDetails.Full_name, UserDetails.Access_token );

                StateHasChanged();
                
            }
            else
            {
                LoginMessage = "Invalid username or password";
            }


            return await Task.FromResult(true);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
            return false; 
        }





    }

}

