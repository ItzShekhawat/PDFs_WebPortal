@page "/Admin/"
@using System.Net.Http.Json
@inject HttpClient httpClient
@using System.Threading
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        @if (context.User.IsInRole("Admin"))
        {
            <MudButton Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" FullWidth="false">

                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Updating...</MudText>
                }
                else
                {
                    <MudText>Update</MudText>
                }
            </MudButton>
            <MudButton OnClick="()=>navigationManager.NavigateTo(destinationStrings)">Go to Clients List</MudButton>

        }
        else
        {
            <MudButton OnClick="()=>navigationManager.NavigateTo(destinationStrings)">Go to Clients List</MudButton>
        }


    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to enter </p>
        <MudButton OnClick="()=>navigationManager.NavigateTo(goback)">Back to Login </MudButton>

    </NotAuthorized>
</AuthorizeView>

@code 
{
    private bool _processing = false;
    List<string> InfoList = new();
    List<string> ClientsList;
    List<string> OrdersList;
    List<string> SuborderList;
    List<string> PDFList;
    List<string> PDF_files;
    string encodePath;
    string root_path = @"S:\SPAC\Commesse";
    string destinationStrings= "/clients/";
    string goback = "/";

    


    async Task ProcessSomething()
    {
        _processing = true;
        string[] slash_path;
        string F_name = "";
        bool isFolder = true;



    encodePath = Uri.EscapeDataString(root_path);
    ClientsList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path="+encodePath);
    //Console.WriteLine("https://localhost:44315/?F_path=" + encodePath);
    string json_User = JsonConvert.SerializeObject(ClientsList);


    // Preparing the httpRequestMessage to handle my request
    HttpRequestMessage httpRequestMessage = new();
    httpRequestMessage.Method = new HttpMethod("POST");
    httpRequestMessage.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=client&doUpdate=true");
    httpRequestMessage.Content = new StringContent(json_User);
    httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

    var response = await httpClient.SendAsync(httpRequestMessage);

    var responseStatusCode = response.StatusCode;

    if(responseStatusCode.ToString() == "OK")
    {
        response.Dispose();

        foreach (var client in ClientsList)
        {
            if (client.Contains("00_SpacEPF") || client.Contains("Aggiornamenti 2021"))// Temporary
            {
                continue;
            }


        encodePath = Uri.EscapeDataString(client);
        OrdersList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);
        json_User = JsonConvert.SerializeObject(OrdersList);
        Console.WriteLine(json_User);
        HttpRequestMessage httpRequestMessageOrder = new();
        httpRequestMessageOrder.Method = new HttpMethod("POST");
        httpRequestMessageOrder.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=orders&doUpdate=true");
        httpRequestMessageOrder.Content = new StringContent(json_User);
        httpRequestMessageOrder.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        response = await httpClient.SendAsync(httpRequestMessageOrder);

        responseStatusCode = response.StatusCode;
        if (responseStatusCode.ToString() == "OK")
        {
            response.Dispose();

            foreach (var order in OrdersList)
            {
                encodePath = Uri.EscapeDataString(order);
                SuborderList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);
                json_User = JsonConvert.SerializeObject(SuborderList);
                HttpRequestMessage httpRequestMessageSub = new();
                httpRequestMessageSub.Method = new HttpMethod("POST");
                httpRequestMessageSub.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=suborder&doUpdate=true");
                httpRequestMessageSub.Content = new StringContent(json_User);
                httpRequestMessageSub.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                response = await httpClient.SendAsync(httpRequestMessageSub);

                responseStatusCode = response.StatusCode;
                if (responseStatusCode.ToString() == "OK")
                {
                    response.Dispose();

                    foreach (var suborder in SuborderList)
                    {
                        encodePath = Uri.EscapeDataString(suborder);
                        PDFList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);


                        json_User = JsonConvert.SerializeObject(PDFList);
                        HttpRequestMessage httpRequestMessagePDF = new();
                        httpRequestMessagePDF.Method = new HttpMethod("POST");
                        httpRequestMessagePDF.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=pdf&doUpdate=true");
                        httpRequestMessagePDF.Content = new StringContent(json_User);
                        httpRequestMessagePDF.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                        response = await httpClient.SendAsync(httpRequestMessagePDF);

                        responseStatusCode = response.StatusCode;
                        if (responseStatusCode.ToString() == "OK")
                        {
                            response.Dispose();

                            foreach (var pdf in PDFList)
                            {
                                slash_path = pdf.Trim().Split(@"\");
                                F_name = slash_path.Last();
                                if (F_name.Contains("PDF") || F_name.Contains("pdf"))
                                {
                                    encodePath = Uri.EscapeDataString(pdf);
                                    PDF_files = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);

                                    json_User = JsonConvert.SerializeObject(PDF_files);
                                    HttpRequestMessage httpRequestMessagePDF_File = new();
                                    httpRequestMessagePDF_File.Method = new HttpMethod("POST");
                                    httpRequestMessagePDF_File.RequestUri = new Uri(@"https://localhost:44315/upFile?doUpdate=true");
                                    httpRequestMessagePDF_File.Content = new StringContent(json_User);
                                    httpRequestMessagePDF_File.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                                    response = await httpClient.SendAsync(httpRequestMessagePDF_File);

                                    responseStatusCode = response.StatusCode;
                                    if (responseStatusCode.ToString() == "OK")
                                    {
                                        continue;
                                    }
                                }
                                else
                                {

                                    continue;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}


_processing = false;


}
}