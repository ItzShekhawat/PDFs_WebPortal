@page "/view/orders/{FK_Father}"
@inject HttpClient Http
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager


<MudTable Items="subOrders" Hover="true" Bordered="true" Filter="new Func<GenericFF_Model, bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh> <MudIcon Style="font-size: 30px" Icon="@Icons.Filled.Folder" /> Folder Name</MudTh>
        <MudTh> <MudIcon Style="font-size: 30px" Icon="@Icons.Filled.Folder" /> Description</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Folder_name" @onclick="()=>clicked(context.FF_Name)">@context.FF_Name</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code
{
    [Parameter]
    public string FK_Father { get; set; }

    public IEnumerable<GenericFF_Model> subOrders = null;
    public string LoginMessage { get; set; }
    bool fixedheader = true;
    public string searchString = "";


    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine("https://localhost:44315/api/Folders/");
        subOrders = await httpClient.GetFromJsonAsync<IEnumerable<GenericFF_Model>>("https://localhost:44315/api/Folders/Orders/" + FK_Father);

    }

    private void clicked(string folder_name)
    {
        NavigationManager.NavigateTo("view/suborder/" + folder_name);
    }

    private bool FilterFunc(GenericFF_Model element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FF_Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Location_path} {element.FK_Father} ".Contains(searchString))
            return true;
        return false;
    }

}
