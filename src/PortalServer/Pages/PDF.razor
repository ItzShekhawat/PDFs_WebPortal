@page "/view/PDF/{FK_Father}"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Mvc
@inject CustomIDataProtection CustomProtection


<AuthorizeView>
    <Authorized Context="user_context">
        <MudTable Items="pdf_files" Hover="true" Bordered="true" Filter="new Func<PDF_FileModel, bool>(FilterFunc)">
            <ColGroup>
                <col style="width: 80%;" />
                <col />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">PDF Files</MudText>
                <MudSpacer />
                <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh> <MudIcon Style="font-size: 25px" Icon="@Icons.Filled.FilePresent" /> File</MudTh>
<<<<<<< Updated upstream
                <MudTh> <MudIcon Style="font-size: 25px" Icon="@Icons.Filled.FolderOpen" /> Origin</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Folder_name" @onclick="()=>clicked(context.FF_Name, context.Location_path)">@context.FF_Name</MudTd>
                <MudTd DataLabel="Father_Name" @onclick="()=>clicked(context.FF_Name, context.Location_path)">@context.FK_Father</MudTd>
=======
                

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Folder_name" @onclick="() => clicked(context.FF_Name, context.Location_path)">@context.FF_Name</MudTd>
               
>>>>>>> Stashed changes
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>

    </Authorized>
    <NotAuthorized>
        <MudAlert> Please Login</MudAlert>
<<<<<<< Updated upstream
        <MudButton OnClick="()=>NavigationManager.NavigateTo(goback)">Back to Login </MudButton>
=======
        <MudButton OnClick="() => NavigationManager.NavigateTo(goback)">Back to Login </MudButton>
>>>>>>> Stashed changes
    </NotAuthorized>
</AuthorizeView>


@code
{
        [Parameter]
        public string FK_Father { get; set; }

    public List<PDF_FileModel> pdf_files = null;
    public List<PDFModel> pdf_folders = null;
    public string searchString = "";
    string goback = "/";


    protected async override Task OnInitializedAsync()
    {
<<<<<<< Updated upstream
        
=======

>>>>>>> Stashed changes
        pdf_folders = await httpClient.GetFromJsonAsync<List<PDFModel>>("https://localhost:44315/api/Views/pdf?father_name=" + CustomProtection.Encode(FK_Father));
        foreach (var pdf in pdf_folders)
        {

            pdf_files = await httpClient.GetFromJsonAsync<List<PDF_FileModel>>("https://localhost:44315/api/Views/pdf_file/" + pdf.Id.ToString());

        }
    }

    private bool FilterFunc(PDF_FileModel element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FF_Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Location_path} {element.FK_Father} ".Contains(searchString))
            return true;
        return false;
    }

    private void clicked(string file_name, string path)
    {
        path = Uri.EscapeDataString(path);
        path = CustomProtection.Decode(path);


        NavigationManager.NavigateTo(@"https://localhost:44315/api/Views/streamPDF?File_path=" + CustomProtection.Encode(path));


    }


}
