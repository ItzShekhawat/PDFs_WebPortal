@inherits LayoutComponentBase
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudLayout>
    <MudAppBar Elevation="1" Style="@($"Background:{Colors.Blue.Darken4}; padding:0px;")">
        <img src="~/logoEPF.png" />
        <MudText Typo="Typo.h5" Class="ml-0">Portale EPF</MudText>
        <MudContainer style="justify-content: end; width: 100%; display: flex; flex-direction:row; margin : 0px;">
            <AuthorizeView >
                <Authorized>
                    <MudText Style="width: contain; display: flex; align-items: center; margin: 0 10px ; ">Welcome @context.User.Identity.Name ! </MudText>
                    @if (context.User.IsInRole("Admin"))
                    {
                        <MudButton Disabled="@_processing" OnClick="ProcessUpdate" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Warning" Style="color: white; margin: 0 5px; font-size: 15px; font-family: Marlett;" FullWidth="false">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2" Style="color:lightgray">Updating...</MudText>
                            }
                            else{ <MudText>Update</MudText>
                            }
                        </MudButton>
                    }
                    <MudButton Class="btn-link btn" OnClick="Logout" StartIcon="@Icons.Material.Filled.Logout" Color="Color.Info" Style="color:white; font-size:15px; font-family:Marlett;" >Logout</MudButton>
                </Authorized>
            </AuthorizeView>
        </MudContainer>
    </MudAppBar>
    <MudMainContent Style="height:100vh; width:100%;">
        @Body
    </MudMainContent>
</MudLayout>


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code{

    #region "Admin Update Btn Staff"
    private bool _processing = false;
    List<string> InfoList = new();
    List<string> ClientsList;
    List<string> OrdersList;
    List<string> SuborderList;
    List<string> PDFList;
    List<string> PDF_files;
    string encodePath;
    string root_path = @"\\itcar1-ss1\Disegni\SPAC\Commesse";
    #endregion


    public async Task Logout()
    {

        // var callbackUrl = Url.Action(nameof(SignedOut), "Account", values: null, protocol: Request.Scheme);
        /*
          return SignOut(
              new AuthenticationProperties { RedirectUri = callbackUrl },
              CookieAuthenticationDefaults.AuthenticationScheme,
              OpenIdConnectDefaults.AuthenticationScheme);

        */
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogoutUserFromAuthentication();
        Navigation.NavigateTo("https://localhost:44309/");
        StateHasChanged();
    }

    async Task ProcessUpdate()
    {
        _processing = true;
        string[] slash_path;
        string F_name = "";


        // Let me Explane this Code >>>>>>
        //
        // 1) First of all, it takes the list of Folders o Files in the Path that I pass him
        // 2) then it passes this list to an API , that will save each element of the list in the DB.
        // 3) Now the code iterate on the list and starts from point 1
        //
        // Code Done >>>>>>

        encodePath = Uri.EscapeDataString(root_path);
        ClientsList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);
        //Console.WriteLine("https://localhost:44315/?F_path=" + encodePath);
        string json_User = JsonConvert.SerializeObject(ClientsList);


        // Preparing the httpRequestMessage to handle my request
        HttpRequestMessage httpRequestMessage = new();
        httpRequestMessage.Method = new HttpMethod("POST");
        httpRequestMessage.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=client&doUpdate=true");
        httpRequestMessage.Content = new StringContent(json_User);
        httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var response = await httpClient.SendAsync(httpRequestMessage);

        var responseStatusCode = response.StatusCode;

        if (responseStatusCode.ToString() == "OK")
        {
            response.Dispose();

            foreach (var client in ClientsList)
            {
                if (client.Contains("00_SpacEPF") || client.Contains("Aggiornamenti 2021"))// Temporary
                {
                    continue;
                }


                encodePath = Uri.EscapeDataString(client);
                OrdersList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);
                json_User = JsonConvert.SerializeObject(OrdersList);
                Console.WriteLine(json_User);
                HttpRequestMessage httpRequestMessageOrder = new();
                httpRequestMessageOrder.Method = new HttpMethod("POST");
                httpRequestMessageOrder.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=orders&doUpdate=true");
                httpRequestMessageOrder.Content = new StringContent(json_User);
                httpRequestMessageOrder.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                response = await httpClient.SendAsync(httpRequestMessageOrder);

                responseStatusCode = response.StatusCode;
                if (responseStatusCode.ToString() == "OK")
                {
                    response.Dispose();

                    foreach (var order in OrdersList)
                    {

                        encodePath = Uri.EscapeDataString(order);
                        SuborderList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);
                        json_User = JsonConvert.SerializeObject(SuborderList);
                        HttpRequestMessage httpRequestMessageSub = new();
                        httpRequestMessageSub.Method = new HttpMethod("POST");
                        httpRequestMessageSub.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=suborder&doUpdate=true");
                        httpRequestMessageSub.Content = new StringContent(json_User);
                        httpRequestMessageSub.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                        response = await httpClient.SendAsync(httpRequestMessageSub);

                        responseStatusCode = response.StatusCode;
                        if (responseStatusCode.ToString() == "OK")
                        {
                            response.Dispose();

                            foreach (var suborder in SuborderList)
                            {
                                encodePath = Uri.EscapeDataString(suborder);
                                PDFList = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);


                                json_User = JsonConvert.SerializeObject(PDFList);
                                HttpRequestMessage httpRequestMessagePDF = new();
                                httpRequestMessagePDF.Method = new HttpMethod("POST");
                                httpRequestMessagePDF.RequestUri = new Uri(@"https://localhost:44315/upDir?TableName=pdf&doUpdate=true");
                                httpRequestMessagePDF.Content = new StringContent(json_User);
                                httpRequestMessagePDF.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                                response = await httpClient.SendAsync(httpRequestMessagePDF);

                                responseStatusCode = response.StatusCode;
                                if (responseStatusCode.ToString() == "OK")
                                {
                                    response.Dispose();

                                    foreach (var pdf in PDFList)
                                    {
                                        slash_path = pdf.Trim().Split(@"\");
                                        F_name = slash_path.Last();
                                        if (F_name.Contains("PDF") || F_name.Contains("pdf"))
                                        {
                                            encodePath = Uri.EscapeDataString(pdf);
                                            PDF_files = await httpClient.GetFromJsonAsync<List<string>>(@"https://localhost:44315/?F_path=" + encodePath);

                                            json_User = JsonConvert.SerializeObject(PDF_files);
                                            HttpRequestMessage httpRequestMessagePDF_File = new();
                                            httpRequestMessagePDF_File.Method = new HttpMethod("POST");
                                            httpRequestMessagePDF_File.RequestUri = new Uri(@"https://localhost:44315/upFile?doUpdate=true");
                                            httpRequestMessagePDF_File.Content = new StringContent(json_User);
                                            httpRequestMessagePDF_File.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

                                            response = await httpClient.SendAsync(httpRequestMessagePDF_File);

                                            responseStatusCode = response.StatusCode;
                                            if (responseStatusCode.ToString() == "OK")
                                            {
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
        _processing = false;
    }
}

